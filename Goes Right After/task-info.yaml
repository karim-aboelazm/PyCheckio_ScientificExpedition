type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    def goes_after(word: str, first: str, second: str) -> bool:
        if word.count(first) < 1 or word.count(second) < 1:
          return False
        return word.index(first) == word.index(second)-1


    if __name__ == '__main__':
        print("Example:")
        print(goes_after('world', 'w', 'o'))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert goes_after('world', 'w', 'o') == True
        assert goes_after('world', 'w', 'r') == False
        assert goes_after('world', 'l', 'o') == False
        assert goes_after('panorama', 'a', 'n') == True
        assert goes_after('list', 'l', 'o') == False
        assert goes_after('', 'l', 'o') == False
        assert goes_after('list', 'l', 'l') == False
        assert goes_after('world', 'd', 'w') == False
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  def goes_after(word: str, first: str, second: str) -> bool:
      if word.count(first) < 1 or word.count(second) < 1:
        return False
      return word.index(first) == word.index(second)-1


  if __name__ == '__main__':
      print("Example:")
      print(goes_after('world', 'w', 'o'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert goes_after('world', 'w', 'o') == True
      assert goes_after('world', 'w', 'r') == False
      assert goes_after('world', 'l', 'o') == False
      assert goes_after('panorama', 'a', 'n') == True
      assert goes_after('list', 'l', 'o') == False
      assert goes_after('', 'l', 'o') == False
      assert goes_after('list', 'l', 'l') == False
      assert goes_after('world', 'd', 'w') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 40024
